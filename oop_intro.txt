What is OOP?
    - based on the concept of objects which contain data in form of attributes and properties and procedures known as methods.
    - its about structuring code so that its functionality can be shared throughout the app
    - makes programs more intuitive to design, faster to develop, more amenable to modification, and easier to understand.

Procedural programming - build programs in sequential order and call methods when you want shared behavior between pages in the application.

Basics
1. Classes and instances
2. The new class method
3. Instance methods
4. Local variables and instance variables
5. Object Attributes

What is an object?
    -  is a thing with all the data and all the logic required to complete a task.

Types of objects
a) Primitive - integer, string, array
b) Non primitive  


Classes
    - identify classes with Caps on name and camel case if they contain two words and class keyword
    - they are blueprints to buikding our objects

        e.g class Dog
                # some code to describe a dog
            end

Instances
    -  Instances refer to the individual objects produced from the class.
    -   Different instances are different objects
    - use the .new method to create instances

The behavior of objects
    - how do we ask this objects to do sth? - dot notation, e.g object-id
    - .methods for defined methods

Instance methods
    - building our own methods i.e instance methods
    - these methods will only be accessible to instances of our class
    e.g class Dog
          # Class body
            # Instance Method Definition
            def bark
                puts "Woof!"
            end
        end
    - cannot be called globally
    - cannot be called without an instance

Types of variables
Local variables 
    - are defined and only accessible within a method


Instance Variables
    i.e containers for instance specific information
    - How do we give objects attributes or properties? i.e instance variables
    - is a variable that is accessible in any instance method in a particular instance of a class.
    - they are prefaced with the @symbol
    -its value is restricted to an object


Local Variables
    - can only be accessed in specific Local environment
    - if defined inside one method it cannot be accessed by another method
    - in order to sucumb this we create instance variables inside our classes

Class variable
- @@
- restricted to the class
- is accessible to child classes
- 

Global variable
- preceded by $ sign 


Defining setter and getter methods
- to be able to set attributes to instances of our classes, we create setter methods which take an argument and set the instance variable equal to that value.

- we create the getter method for the objects to know the value of their attributes. the getter method will return the value of the instance variable

initialization
    - called when creating an object
        def initialize()
            some code
        end


Self in Ruby
- is a variable pointing to the object currently executing the code.
- is a very important concept and a powerful tool of abstraction that makes our objects self-aware. 
-Only available in the context of a class
-referencing the calling object



Class Method
- operated by class itself
- uses self. on the method name
        def self.method_name
            code
        end

for a bunch of methods

    class << self
        def method_name
            @@variable
        end

        def all
            @@variable
        end 

instance methods
-operated by instances on themselves

-Class variable
 - two @@
 -defined within the class where the class method only has access to
 - they must be initialized first then they can be used 

        @@variable_name = value


Remembering objects
its about keeping track of instances that are created
- store values of self on an array and read them by calling methods on them

Classes and modules are treated as objects in Ruby
To align a block of self methods withoud calling self in every method. use this syntax

Class Dog

    class << self
        def bark
            "woof"
        end

        def chew
            "chew"
        end
    end
end

all codes withing the block could also be written as 

    class Dog 
        def self.bark
            "woof"
        end

        def self.chew
            "chew"
        end

    end

Inheritance
    <
    super class
    sub class
    overide methods - by redefining methods within the subclass
    add functionality - by defining new methods in the subclass



Recap on modules and Inheritance
module Publisher
    def publisher 
        "The publisher is Macmillan"
        end
end

class Books
    include Publisher
    def pages(no_of_pages)
        "The no. of pages is " + no_of_pages.to_s
    end
end


class Literature < Books
    def author(name)
        "The author is #{name}"
    end

    class << self
        def type_of_literature
            "oral"
        end
  
        def orator(name)
            name
        end
    end
 end